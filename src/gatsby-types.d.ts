/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type Bill = Node & {
  readonly aom_id: Scalars['String'];
  readonly article: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly co_sponsors: Maybe<ReadonlyArray<Maybe<Legislator>>>;
  readonly committee: Maybe<Committee>;
  readonly fileName: Scalars['String'];
  readonly full_title: Maybe<Scalars['String']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly history: Maybe<ReadonlyArray<Maybe<BillHistoryItem>>>;
  readonly house_lead_sponsors: Maybe<ReadonlyArray<Maybe<Legislator>>>;
  readonly house_link: Maybe<Scalars['String']>;
  readonly house_no: Maybe<Scalars['String']>;
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly img: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly issue: Maybe<Issue>;
  readonly no_sponsorship_data: Maybe<Scalars['Boolean']>;
  readonly orgs: Maybe<ReadonlyArray<Maybe<LinkWithImg>>>;
  readonly parent: Maybe<Node>;
  readonly scripts: Maybe<Script>;
  readonly scripts_com_vote: Maybe<Script>;
  readonly senate_lead_sponsors: Maybe<ReadonlyArray<Maybe<Legislator>>>;
  readonly senate_link: Maybe<Scalars['String']>;
  readonly senate_no: Maybe<Scalars['String']>;
  readonly summary: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly text: Maybe<Scalars['String']>;
  readonly timeline: Maybe<ReadonlyArray<Maybe<BillTimelineItem>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitter_bill_name: Maybe<Scalars['String']>;
};


type Bill_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type BillConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BillEdge>;
  readonly group: ReadonlyArray<BillGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Bill>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BillConnection_distinctArgs = {
  field: BillFieldSelector;
};


type BillConnection_groupArgs = {
  field: BillFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BillConnection_maxArgs = {
  field: BillFieldSelector;
};


type BillConnection_minArgs = {
  field: BillFieldSelector;
};


type BillConnection_sumArgs = {
  field: BillFieldSelector;
};

type BillEdge = {
  readonly next: Maybe<Bill>;
  readonly node: Bill;
  readonly previous: Maybe<Bill>;
};

type BillEvent = Node & {
  readonly aom_id: Scalars['String'];
  readonly bill: Maybe<Bill>;
  readonly children: ReadonlyArray<Node>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fileName: Scalars['String'];
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly progressive_vote: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly vote_descriptions: Maybe<BillEventVoteDesc>;
  readonly votes: Maybe<ReadonlyArray<Maybe<BillEventVote>>>;
};

type BillEventConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BillEventEdge>;
  readonly group: ReadonlyArray<BillEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<BillEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BillEventConnection_distinctArgs = {
  field: BillEventFieldSelector;
};


type BillEventConnection_groupArgs = {
  field: BillEventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BillEventConnection_maxArgs = {
  field: BillEventFieldSelector;
};


type BillEventConnection_minArgs = {
  field: BillEventFieldSelector;
};


type BillEventConnection_sumArgs = {
  field: BillEventFieldSelector;
};

type BillEventEdge = {
  readonly next: Maybe<BillEvent>;
  readonly node: BillEvent;
  readonly previous: Maybe<BillEvent>;
};

type BillEventFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly bill: InputMaybe<BillFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly progressive_vote: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly vote_descriptions: InputMaybe<BillEventVoteDescFieldSelector>;
  readonly votes: InputMaybe<BillEventVoteFieldSelector>;
};

type BillEventFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly bill: InputMaybe<BillFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly progressive_vote: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly vote_descriptions: InputMaybe<BillEventVoteDescFilterInput>;
  readonly votes: InputMaybe<BillEventVoteFilterListInput>;
};

type BillEventGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BillEventEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<BillEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<BillEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BillEventGroupConnection_distinctArgs = {
  field: BillEventFieldSelector;
};


type BillEventGroupConnection_groupArgs = {
  field: BillEventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BillEventGroupConnection_maxArgs = {
  field: BillEventFieldSelector;
};


type BillEventGroupConnection_minArgs = {
  field: BillEventFieldSelector;
};


type BillEventGroupConnection_sumArgs = {
  field: BillEventFieldSelector;
};

type BillEventSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly bill: InputMaybe<BillSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly progressive_vote: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly vote_descriptions: InputMaybe<BillEventVoteDescSortInput>;
  readonly votes: InputMaybe<BillEventVoteSortInput>;
};

type BillEventVote = {
  readonly legislator: Maybe<Legislator>;
  readonly vote: Maybe<Scalars['String']>;
};

type BillEventVoteDesc = {
  readonly no: Maybe<Scalars['String']>;
  readonly unk: Maybe<Scalars['String']>;
  readonly yes: Maybe<Scalars['String']>;
};

type BillEventVoteDescFieldSelector = {
  readonly no: InputMaybe<FieldSelectorEnum>;
  readonly unk: InputMaybe<FieldSelectorEnum>;
  readonly yes: InputMaybe<FieldSelectorEnum>;
};

type BillEventVoteDescFilterInput = {
  readonly no: InputMaybe<StringQueryOperatorInput>;
  readonly unk: InputMaybe<StringQueryOperatorInput>;
  readonly yes: InputMaybe<StringQueryOperatorInput>;
};

type BillEventVoteDescSortInput = {
  readonly no: InputMaybe<SortOrderEnum>;
  readonly unk: InputMaybe<SortOrderEnum>;
  readonly yes: InputMaybe<SortOrderEnum>;
};

type BillEventVoteFieldSelector = {
  readonly legislator: InputMaybe<LegislatorFieldSelector>;
  readonly vote: InputMaybe<FieldSelectorEnum>;
};

type BillEventVoteFilterInput = {
  readonly legislator: InputMaybe<LegislatorFilterInput>;
  readonly vote: InputMaybe<StringQueryOperatorInput>;
};

type BillEventVoteFilterListInput = {
  readonly elemMatch: InputMaybe<BillEventVoteFilterInput>;
};

type BillEventVoteSortInput = {
  readonly legislator: InputMaybe<LegislatorSortInput>;
  readonly vote: InputMaybe<SortOrderEnum>;
};

type BillFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly article: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly co_sponsors: InputMaybe<LegislatorFieldSelector>;
  readonly committee: InputMaybe<CommitteeFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly full_title: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly history: InputMaybe<BillHistoryItemFieldSelector>;
  readonly house_lead_sponsors: InputMaybe<LegislatorFieldSelector>;
  readonly house_link: InputMaybe<FieldSelectorEnum>;
  readonly house_no: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly issue: InputMaybe<IssueFieldSelector>;
  readonly no_sponsorship_data: InputMaybe<FieldSelectorEnum>;
  readonly orgs: InputMaybe<LinkWithImgFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly scripts: InputMaybe<ScriptFieldSelector>;
  readonly scripts_com_vote: InputMaybe<ScriptFieldSelector>;
  readonly senate_lead_sponsors: InputMaybe<LegislatorFieldSelector>;
  readonly senate_link: InputMaybe<FieldSelectorEnum>;
  readonly senate_no: InputMaybe<FieldSelectorEnum>;
  readonly summary: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly timeline: InputMaybe<BillTimelineItemFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter_bill_name: InputMaybe<FieldSelectorEnum>;
};

type BillFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly article: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly co_sponsors: InputMaybe<LegislatorFilterListInput>;
  readonly committee: InputMaybe<CommitteeFilterInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly full_title: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly history: InputMaybe<BillHistoryItemFilterListInput>;
  readonly house_lead_sponsors: InputMaybe<LegislatorFilterListInput>;
  readonly house_link: InputMaybe<StringQueryOperatorInput>;
  readonly house_no: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly issue: InputMaybe<IssueFilterInput>;
  readonly no_sponsorship_data: InputMaybe<BooleanQueryOperatorInput>;
  readonly orgs: InputMaybe<LinkWithImgFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly scripts: InputMaybe<ScriptFilterInput>;
  readonly scripts_com_vote: InputMaybe<ScriptFilterInput>;
  readonly senate_lead_sponsors: InputMaybe<LegislatorFilterListInput>;
  readonly senate_link: InputMaybe<StringQueryOperatorInput>;
  readonly senate_no: InputMaybe<StringQueryOperatorInput>;
  readonly summary: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly timeline: InputMaybe<BillTimelineItemFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_bill_name: InputMaybe<StringQueryOperatorInput>;
};

type BillFilterListInput = {
  readonly elemMatch: InputMaybe<BillFilterInput>;
};

type BillGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BillEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<BillGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Bill>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BillGroupConnection_distinctArgs = {
  field: BillFieldSelector;
};


type BillGroupConnection_groupArgs = {
  field: BillFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BillGroupConnection_maxArgs = {
  field: BillFieldSelector;
};


type BillGroupConnection_minArgs = {
  field: BillFieldSelector;
};


type BillGroupConnection_sumArgs = {
  field: BillFieldSelector;
};

type BillHistoryItem = {
  readonly bill_event: Maybe<BillEvent>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type BillHistoryItemFieldSelector = {
  readonly bill_event: InputMaybe<BillEventFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type BillHistoryItemFilterInput = {
  readonly bill_event: InputMaybe<BillEventFilterInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type BillHistoryItemFilterListInput = {
  readonly elemMatch: InputMaybe<BillHistoryItemFilterInput>;
};

type BillHistoryItemSortInput = {
  readonly bill_event: InputMaybe<BillEventSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type BillSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly article: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly co_sponsors: InputMaybe<LegislatorSortInput>;
  readonly committee: InputMaybe<CommitteeSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly full_title: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly history: InputMaybe<BillHistoryItemSortInput>;
  readonly house_lead_sponsors: InputMaybe<LegislatorSortInput>;
  readonly house_link: InputMaybe<SortOrderEnum>;
  readonly house_no: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly img: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly issue: InputMaybe<IssueSortInput>;
  readonly no_sponsorship_data: InputMaybe<SortOrderEnum>;
  readonly orgs: InputMaybe<LinkWithImgSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly scripts: InputMaybe<ScriptSortInput>;
  readonly scripts_com_vote: InputMaybe<ScriptSortInput>;
  readonly senate_lead_sponsors: InputMaybe<LegislatorSortInput>;
  readonly senate_link: InputMaybe<SortOrderEnum>;
  readonly senate_no: InputMaybe<SortOrderEnum>;
  readonly summary: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly timeline: InputMaybe<BillTimelineItemSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter_bill_name: InputMaybe<SortOrderEnum>;
};

type BillTimelineItem = {
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
};

type BillTimelineItemFieldSelector = {
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
};

type BillTimelineItemFilterInput = {
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
};

type BillTimelineItemFilterListInput = {
  readonly elemMatch: InputMaybe<BillTimelineItemFilterInput>;
};

type BillTimelineItemSortInput = {
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type Committee = Node & {
  readonly aom_id: Scalars['String'];
  readonly chamber: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly fileName: Scalars['String'];
  readonly house_chair: Maybe<Legislator>;
  readonly house_members: Maybe<ReadonlyArray<Maybe<Legislator>>>;
  readonly house_vice_chair: Maybe<Legislator>;
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly malegislature_url: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly senate_chair: Maybe<Legislator>;
  readonly senate_members: Maybe<ReadonlyArray<Maybe<Legislator>>>;
  readonly senate_vice_chair: Maybe<Legislator>;
  readonly title: Maybe<Scalars['String']>;
};

type CommitteeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CommitteeEdge>;
  readonly group: ReadonlyArray<CommitteeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Committee>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CommitteeConnection_distinctArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeConnection_groupArgs = {
  field: CommitteeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CommitteeConnection_maxArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeConnection_minArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeConnection_sumArgs = {
  field: CommitteeFieldSelector;
};

type CommitteeEdge = {
  readonly next: Maybe<Committee>;
  readonly node: Committee;
  readonly previous: Maybe<Committee>;
};

type CommitteeFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly chamber: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly house_chair: InputMaybe<LegislatorFieldSelector>;
  readonly house_members: InputMaybe<LegislatorFieldSelector>;
  readonly house_vice_chair: InputMaybe<LegislatorFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly malegislature_url: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly senate_chair: InputMaybe<LegislatorFieldSelector>;
  readonly senate_members: InputMaybe<LegislatorFieldSelector>;
  readonly senate_vice_chair: InputMaybe<LegislatorFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type CommitteeFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly chamber: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly house_chair: InputMaybe<LegislatorFilterInput>;
  readonly house_members: InputMaybe<LegislatorFilterListInput>;
  readonly house_vice_chair: InputMaybe<LegislatorFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly malegislature_url: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly senate_chair: InputMaybe<LegislatorFilterInput>;
  readonly senate_members: InputMaybe<LegislatorFilterListInput>;
  readonly senate_vice_chair: InputMaybe<LegislatorFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type CommitteeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CommitteeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<CommitteeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Committee>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CommitteeGroupConnection_distinctArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeGroupConnection_groupArgs = {
  field: CommitteeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CommitteeGroupConnection_maxArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeGroupConnection_minArgs = {
  field: CommitteeFieldSelector;
};


type CommitteeGroupConnection_sumArgs = {
  field: CommitteeFieldSelector;
};

type CommitteeSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly chamber: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly house_chair: InputMaybe<LegislatorSortInput>;
  readonly house_members: InputMaybe<LegislatorSortInput>;
  readonly house_vice_chair: InputMaybe<LegislatorSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly malegislature_url: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly senate_chair: InputMaybe<LegislatorSortInput>;
  readonly senate_members: InputMaybe<LegislatorSortInput>;
  readonly senate_vice_chair: InputMaybe<LegislatorSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type District = Node & {
  readonly aom_id: Scalars['String'];
  readonly chamber: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly fileName: Scalars['String'];
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lat: Maybe<Scalars['Float']>;
  readonly lng: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly van_id: Maybe<Scalars['String']>;
};

type DistrictConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DistrictEdge>;
  readonly group: ReadonlyArray<DistrictGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<District>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DistrictConnection_distinctArgs = {
  field: DistrictFieldSelector;
};


type DistrictConnection_groupArgs = {
  field: DistrictFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DistrictConnection_maxArgs = {
  field: DistrictFieldSelector;
};


type DistrictConnection_minArgs = {
  field: DistrictFieldSelector;
};


type DistrictConnection_sumArgs = {
  field: DistrictFieldSelector;
};

type DistrictEdge = {
  readonly next: Maybe<District>;
  readonly node: District;
  readonly previous: Maybe<District>;
};

type DistrictFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly chamber: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lng: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly van_id: InputMaybe<FieldSelectorEnum>;
};

type DistrictFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly chamber: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly lng: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly van_id: InputMaybe<StringQueryOperatorInput>;
};

type DistrictGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DistrictEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DistrictGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<District>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DistrictGroupConnection_distinctArgs = {
  field: DistrictFieldSelector;
};


type DistrictGroupConnection_groupArgs = {
  field: DistrictFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DistrictGroupConnection_maxArgs = {
  field: DistrictFieldSelector;
};


type DistrictGroupConnection_minArgs = {
  field: DistrictFieldSelector;
};


type DistrictGroupConnection_sumArgs = {
  field: DistrictFieldSelector;
};

type DistrictSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly chamber: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lng: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly van_id: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type EmailScript = {
  readonly body: Maybe<Scalars['String']>;
  readonly subject: Maybe<Scalars['String']>;
};

type EmailScriptFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly subject: InputMaybe<FieldSelectorEnum>;
};

type EmailScriptFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
};

type EmailScriptSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly subject: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
  readonly childMdx: Maybe<Mdx>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  /** Returns all children nodes filtered by type Mdx */
  readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly childMdx: InputMaybe<MdxFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly childrenMdx: InputMaybe<MdxFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly childMdx: InputMaybe<MdxFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly childrenMdx: InputMaybe<MdxFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly childMdx: InputMaybe<MdxSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly childrenMdx: InputMaybe<MdxSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type Issue = Node & {
  readonly aom_id: Scalars['String'];
  readonly bills: Maybe<ReadonlyArray<Maybe<Bill>>>;
  readonly bills_to_support_title: Maybe<Scalars['String']>;
  readonly catchphrase: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly failures: ReadonlyArray<Maybe<IssueTextBlock>>;
  readonly failures_block_title: Maybe<Scalars['String']>;
  readonly fileName: Scalars['String'];
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly highlighted_bills: Maybe<ReadonlyArray<Maybe<Bill>>>;
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly img: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly learn_more: ReadonlyArray<Maybe<LinkWithImg>>;
  readonly logo: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly page_img: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly questions: ReadonlyArray<Maybe<IssueTextBlock>>;
  readonly references: ReadonlyArray<Maybe<IssueReference>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type Issue_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type IssueConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<IssueEdge>;
  readonly group: ReadonlyArray<IssueGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Issue>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type IssueConnection_distinctArgs = {
  field: IssueFieldSelector;
};


type IssueConnection_groupArgs = {
  field: IssueFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type IssueConnection_maxArgs = {
  field: IssueFieldSelector;
};


type IssueConnection_minArgs = {
  field: IssueFieldSelector;
};


type IssueConnection_sumArgs = {
  field: IssueFieldSelector;
};

type IssueEdge = {
  readonly next: Maybe<Issue>;
  readonly node: Issue;
  readonly previous: Maybe<Issue>;
};

type IssueFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly bills: InputMaybe<BillFieldSelector>;
  readonly bills_to_support_title: InputMaybe<FieldSelectorEnum>;
  readonly catchphrase: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly failures: InputMaybe<IssueTextBlockFieldSelector>;
  readonly failures_block_title: InputMaybe<FieldSelectorEnum>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly highlighted_bills: InputMaybe<BillFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly learn_more: InputMaybe<LinkWithImgFieldSelector>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly page_img: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly questions: InputMaybe<IssueTextBlockFieldSelector>;
  readonly references: InputMaybe<IssueReferenceFieldSelector>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type IssueFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly bills: InputMaybe<BillFilterListInput>;
  readonly bills_to_support_title: InputMaybe<StringQueryOperatorInput>;
  readonly catchphrase: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly failures: InputMaybe<IssueTextBlockFilterListInput>;
  readonly failures_block_title: InputMaybe<StringQueryOperatorInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly highlighted_bills: InputMaybe<BillFilterListInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly learn_more: InputMaybe<LinkWithImgFilterListInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly page_img: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly questions: InputMaybe<IssueTextBlockFilterListInput>;
  readonly references: InputMaybe<IssueReferenceFilterListInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type IssueGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<IssueEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<IssueGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Issue>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type IssueGroupConnection_distinctArgs = {
  field: IssueFieldSelector;
};


type IssueGroupConnection_groupArgs = {
  field: IssueFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type IssueGroupConnection_maxArgs = {
  field: IssueFieldSelector;
};


type IssueGroupConnection_minArgs = {
  field: IssueFieldSelector;
};


type IssueGroupConnection_sumArgs = {
  field: IssueFieldSelector;
};

type IssueReference = {
  readonly key: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type IssueReferenceFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type IssueReferenceFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type IssueReferenceFilterListInput = {
  readonly elemMatch: InputMaybe<IssueReferenceFilterInput>;
};

type IssueReferenceSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type IssueSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly bills: InputMaybe<BillSortInput>;
  readonly bills_to_support_title: InputMaybe<SortOrderEnum>;
  readonly catchphrase: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly failures: InputMaybe<IssueTextBlockSortInput>;
  readonly failures_block_title: InputMaybe<SortOrderEnum>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly highlighted_bills: InputMaybe<BillSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly img: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly learn_more: InputMaybe<LinkWithImgSortInput>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly page_img: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly questions: InputMaybe<IssueTextBlockSortInput>;
  readonly references: InputMaybe<IssueReferenceSortInput>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type IssueTextBlock = {
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type IssueTextBlockFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type IssueTextBlockFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type IssueTextBlockFilterListInput = {
  readonly elemMatch: InputMaybe<IssueTextBlockFilterInput>;
};

type IssueTextBlockSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Legislator = Node & {
  readonly aom_id: Scalars['String'];
  readonly chamber: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly committees: Maybe<ReadonlyArray<Maybe<LegislatorCommittee>>>;
  readonly cosponsored_bills: Maybe<ReadonlyArray<Maybe<Bill>>>;
  readonly district: Maybe<District>;
  readonly email: Maybe<Scalars['String']>;
  readonly end_date: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly fileName: Scalars['String'];
  readonly first_name: Scalars['String'];
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly hometown: Maybe<Scalars['String']>;
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly last_name: Scalars['String'];
  readonly malegislature_url: Maybe<Scalars['String']>;
  readonly ocd_id: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly party: Maybe<Scalars['String']>;
  readonly phone: Maybe<Scalars['String']>;
  readonly pledge: Scalars['Boolean'];
  readonly square_picture: Maybe<Scalars['String']>;
  readonly start_date: Maybe<Scalars['String']>;
  readonly supports_the_campaign: Scalars['Boolean'];
  readonly supports_the_campaign_committee_votes: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_public_bills: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_term_limits: Maybe<Scalars['Boolean']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly website: Maybe<Scalars['String']>;
};


type Legislator_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type LegislatorCommittee = {
  readonly committee: Committee;
  readonly role: Scalars['String'];
};

type LegislatorCommitteeFieldSelector = {
  readonly committee: InputMaybe<CommitteeFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
};

type LegislatorCommitteeFilterInput = {
  readonly committee: InputMaybe<CommitteeFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
};

type LegislatorCommitteeFilterListInput = {
  readonly elemMatch: InputMaybe<LegislatorCommitteeFilterInput>;
};

type LegislatorCommitteeSortInput = {
  readonly committee: InputMaybe<CommitteeSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
};

type LegislatorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LegislatorEdge>;
  readonly group: ReadonlyArray<LegislatorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Legislator>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LegislatorConnection_distinctArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorConnection_groupArgs = {
  field: LegislatorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LegislatorConnection_maxArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorConnection_minArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorConnection_sumArgs = {
  field: LegislatorFieldSelector;
};

type LegislatorEdge = {
  readonly next: Maybe<Legislator>;
  readonly node: Legislator;
  readonly previous: Maybe<Legislator>;
};

type LegislatorFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly chamber: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly committees: InputMaybe<LegislatorCommitteeFieldSelector>;
  readonly cosponsored_bills: InputMaybe<BillFieldSelector>;
  readonly district: InputMaybe<DistrictFieldSelector>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly end_date: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly first_name: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly hometown: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly last_name: InputMaybe<FieldSelectorEnum>;
  readonly malegislature_url: InputMaybe<FieldSelectorEnum>;
  readonly ocd_id: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly party: InputMaybe<FieldSelectorEnum>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
  readonly pledge: InputMaybe<FieldSelectorEnum>;
  readonly square_picture: InputMaybe<FieldSelectorEnum>;
  readonly start_date: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type LegislatorFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly chamber: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly committees: InputMaybe<LegislatorCommitteeFilterListInput>;
  readonly cosponsored_bills: InputMaybe<BillFilterListInput>;
  readonly district: InputMaybe<DistrictFilterInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly end_date: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly first_name: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly hometown: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly last_name: InputMaybe<StringQueryOperatorInput>;
  readonly malegislature_url: InputMaybe<StringQueryOperatorInput>;
  readonly ocd_id: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly party: InputMaybe<StringQueryOperatorInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
  readonly pledge: InputMaybe<BooleanQueryOperatorInput>;
  readonly square_picture: InputMaybe<StringQueryOperatorInput>;
  readonly start_date: InputMaybe<StringQueryOperatorInput>;
  readonly supports_the_campaign: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_committee_votes: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_public_bills: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_term_limits: InputMaybe<BooleanQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type LegislatorFilterListInput = {
  readonly elemMatch: InputMaybe<LegislatorFilterInput>;
};

type LegislatorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LegislatorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LegislatorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Legislator>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LegislatorGroupConnection_distinctArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorGroupConnection_groupArgs = {
  field: LegislatorFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LegislatorGroupConnection_maxArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorGroupConnection_minArgs = {
  field: LegislatorFieldSelector;
};


type LegislatorGroupConnection_sumArgs = {
  field: LegislatorFieldSelector;
};

type LegislatorSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly chamber: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly committees: InputMaybe<LegislatorCommitteeSortInput>;
  readonly cosponsored_bills: InputMaybe<BillSortInput>;
  readonly district: InputMaybe<DistrictSortInput>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly end_date: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly first_name: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly hometown: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly last_name: InputMaybe<SortOrderEnum>;
  readonly malegislature_url: InputMaybe<SortOrderEnum>;
  readonly ocd_id: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly party: InputMaybe<SortOrderEnum>;
  readonly phone: InputMaybe<SortOrderEnum>;
  readonly pledge: InputMaybe<SortOrderEnum>;
  readonly square_picture: InputMaybe<SortOrderEnum>;
  readonly start_date: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type LinkWithImg = {
  readonly img: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type LinkWithImgFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LinkWithImgFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LinkWithImgFilterListInput = {
  readonly elemMatch: InputMaybe<LinkWithImgFilterInput>;
};

type LinkWithImgSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly fileAbsolutePath: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly aom_id: Maybe<Scalars['String']>;
  readonly article: Maybe<Scalars['String']>;
  readonly author: Maybe<Scalars['String']>;
  readonly bill: Maybe<Scalars['String']>;
  readonly bills_to_support_title: Maybe<Scalars['String']>;
  readonly catchphrase: Maybe<Scalars['String']>;
  readonly category: Maybe<Scalars['String']>;
  readonly chamber: Maybe<Scalars['String']>;
  readonly co_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly committee: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly district: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly end_date: Maybe<Scalars['String']>;
  readonly endorsing_orgs: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterEndorsing_orgs>>>;
  readonly extract: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly failures: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterFailures>>>;
  readonly failures_block_title: Maybe<Scalars['String']>;
  readonly first_name: Maybe<Scalars['String']>;
  readonly formatted_url: Maybe<Scalars['String']>;
  readonly full_title: Maybe<Scalars['String']>;
  readonly header: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterHeader>>>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly highlighted_bills: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly history: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterHistory>>>;
  readonly hometown: Maybe<Scalars['String']>;
  readonly house_chair: Maybe<Scalars['String']>;
  readonly house_lead_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly house_link: Maybe<Scalars['String']>;
  readonly house_members: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly house_no: Maybe<Scalars['String']>;
  readonly house_vice_chair: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly img: Maybe<Scalars['String']>;
  readonly img_folder: Maybe<Scalars['String']>;
  readonly issue: Maybe<Scalars['String']>;
  readonly last_name: Maybe<Scalars['String']>;
  readonly lat: Maybe<Scalars['Float']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly learn_more: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterLearn_more>>>;
  readonly link: Maybe<Scalars['String']>;
  readonly lng: Maybe<Scalars['Float']>;
  readonly logo: Maybe<Scalars['String']>;
  readonly malegislature_url: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly no_sponsorship_data: Maybe<Scalars['Boolean']>;
  readonly ocd_id: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly orgs: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterOrgs>>>;
  readonly page_img: Maybe<Scalars['String']>;
  readonly party: Maybe<Scalars['String']>;
  readonly permalink: Maybe<Scalars['String']>;
  readonly phone: Maybe<Scalars['String']>;
  readonly photo: Maybe<Scalars['String']>;
  readonly pledge: Maybe<Scalars['Boolean']>;
  readonly progressive_vote: Maybe<Scalars['String']>;
  readonly questions: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterQuestions>>>;
  readonly redirect_from: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly references: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterReferences>>>;
  readonly scripts: Maybe<MarkdownRemarkFrontmatterScripts>;
  readonly scripts_com_vote: Maybe<MarkdownRemarkFrontmatterScripts_com_vote>;
  readonly senate_chair: Maybe<Scalars['String']>;
  readonly senate_lead_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly senate_link: Maybe<Scalars['String']>;
  readonly senate_members: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly senate_no: Maybe<Scalars['String']>;
  readonly senate_vice_chair: Maybe<Scalars['String']>;
  readonly square_picture: Maybe<Scalars['String']>;
  readonly start_date: Maybe<Scalars['Date']>;
  readonly styles: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly summary: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly supports_the_campaign: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_committee_votes: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_public_bills: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_term_limits: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly timeline: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTimeline>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly twitter_bill_name: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['String']>;
  readonly van_id: Maybe<Scalars['String']>;
  readonly video: Maybe<Scalars['String']>;
  readonly vote_descriptions: Maybe<MarkdownRemarkFrontmatterVote_descriptions>;
  readonly votes: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterVotes>>>;
  readonly website: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_start_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterEndorsing_orgs = {
  readonly img: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterEndorsing_orgsFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterEndorsing_orgsFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterEndorsing_orgsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterEndorsing_orgsFilterInput>;
};

type MarkdownRemarkFrontmatterEndorsing_orgsSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterFailures = {
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFailuresFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFailuresFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterFailuresFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterFailuresFilterInput>;
};

type MarkdownRemarkFrontmatterFailuresSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly article: InputMaybe<FieldSelectorEnum>;
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly bill: InputMaybe<FieldSelectorEnum>;
  readonly bills_to_support_title: InputMaybe<FieldSelectorEnum>;
  readonly catchphrase: InputMaybe<FieldSelectorEnum>;
  readonly category: InputMaybe<FieldSelectorEnum>;
  readonly chamber: InputMaybe<FieldSelectorEnum>;
  readonly co_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly committee: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly district: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly end_date: InputMaybe<FieldSelectorEnum>;
  readonly endorsing_orgs: InputMaybe<MarkdownRemarkFrontmatterEndorsing_orgsFieldSelector>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly failures: InputMaybe<MarkdownRemarkFrontmatterFailuresFieldSelector>;
  readonly failures_block_title: InputMaybe<FieldSelectorEnum>;
  readonly first_name: InputMaybe<FieldSelectorEnum>;
  readonly formatted_url: InputMaybe<FieldSelectorEnum>;
  readonly full_title: InputMaybe<FieldSelectorEnum>;
  readonly header: InputMaybe<MarkdownRemarkFrontmatterHeaderFieldSelector>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly highlighted_bills: InputMaybe<FieldSelectorEnum>;
  readonly history: InputMaybe<MarkdownRemarkFrontmatterHistoryFieldSelector>;
  readonly hometown: InputMaybe<FieldSelectorEnum>;
  readonly house_chair: InputMaybe<FieldSelectorEnum>;
  readonly house_lead_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly house_link: InputMaybe<FieldSelectorEnum>;
  readonly house_members: InputMaybe<FieldSelectorEnum>;
  readonly house_no: InputMaybe<FieldSelectorEnum>;
  readonly house_vice_chair: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly img_folder: InputMaybe<FieldSelectorEnum>;
  readonly issue: InputMaybe<FieldSelectorEnum>;
  readonly last_name: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly learn_more: InputMaybe<MarkdownRemarkFrontmatterLearn_moreFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly lng: InputMaybe<FieldSelectorEnum>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly malegislature_url: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly no_sponsorship_data: InputMaybe<FieldSelectorEnum>;
  readonly ocd_id: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly orgs: InputMaybe<MarkdownRemarkFrontmatterOrgsFieldSelector>;
  readonly page_img: InputMaybe<FieldSelectorEnum>;
  readonly party: InputMaybe<FieldSelectorEnum>;
  readonly permalink: InputMaybe<FieldSelectorEnum>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
  readonly photo: InputMaybe<FieldSelectorEnum>;
  readonly pledge: InputMaybe<FieldSelectorEnum>;
  readonly progressive_vote: InputMaybe<FieldSelectorEnum>;
  readonly questions: InputMaybe<MarkdownRemarkFrontmatterQuestionsFieldSelector>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly references: InputMaybe<MarkdownRemarkFrontmatterReferencesFieldSelector>;
  readonly scripts: InputMaybe<MarkdownRemarkFrontmatterScriptsFieldSelector>;
  readonly scripts_com_vote: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteFieldSelector>;
  readonly senate_chair: InputMaybe<FieldSelectorEnum>;
  readonly senate_lead_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly senate_link: InputMaybe<FieldSelectorEnum>;
  readonly senate_members: InputMaybe<FieldSelectorEnum>;
  readonly senate_no: InputMaybe<FieldSelectorEnum>;
  readonly senate_vice_chair: InputMaybe<FieldSelectorEnum>;
  readonly square_picture: InputMaybe<FieldSelectorEnum>;
  readonly start_date: InputMaybe<FieldSelectorEnum>;
  readonly styles: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly summary: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly timeline: InputMaybe<MarkdownRemarkFrontmatterTimelineFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly twitter_bill_name: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly van_id: InputMaybe<FieldSelectorEnum>;
  readonly video: InputMaybe<FieldSelectorEnum>;
  readonly vote_descriptions: InputMaybe<MarkdownRemarkFrontmatterVote_descriptionsFieldSelector>;
  readonly votes: InputMaybe<MarkdownRemarkFrontmatterVotesFieldSelector>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly article: InputMaybe<StringQueryOperatorInput>;
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly bill: InputMaybe<StringQueryOperatorInput>;
  readonly bills_to_support_title: InputMaybe<StringQueryOperatorInput>;
  readonly catchphrase: InputMaybe<StringQueryOperatorInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly chamber: InputMaybe<StringQueryOperatorInput>;
  readonly co_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly committee: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly district: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly end_date: InputMaybe<StringQueryOperatorInput>;
  readonly endorsing_orgs: InputMaybe<MarkdownRemarkFrontmatterEndorsing_orgsFilterListInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly failures: InputMaybe<MarkdownRemarkFrontmatterFailuresFilterListInput>;
  readonly failures_block_title: InputMaybe<StringQueryOperatorInput>;
  readonly first_name: InputMaybe<StringQueryOperatorInput>;
  readonly formatted_url: InputMaybe<StringQueryOperatorInput>;
  readonly full_title: InputMaybe<StringQueryOperatorInput>;
  readonly header: InputMaybe<MarkdownRemarkFrontmatterHeaderFilterListInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly highlighted_bills: InputMaybe<StringQueryOperatorInput>;
  readonly history: InputMaybe<MarkdownRemarkFrontmatterHistoryFilterListInput>;
  readonly hometown: InputMaybe<StringQueryOperatorInput>;
  readonly house_chair: InputMaybe<StringQueryOperatorInput>;
  readonly house_lead_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly house_link: InputMaybe<StringQueryOperatorInput>;
  readonly house_members: InputMaybe<StringQueryOperatorInput>;
  readonly house_no: InputMaybe<StringQueryOperatorInput>;
  readonly house_vice_chair: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly img_folder: InputMaybe<StringQueryOperatorInput>;
  readonly issue: InputMaybe<StringQueryOperatorInput>;
  readonly last_name: InputMaybe<StringQueryOperatorInput>;
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly learn_more: InputMaybe<MarkdownRemarkFrontmatterLearn_moreFilterListInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly lng: InputMaybe<FloatQueryOperatorInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly malegislature_url: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly no_sponsorship_data: InputMaybe<BooleanQueryOperatorInput>;
  readonly ocd_id: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly orgs: InputMaybe<MarkdownRemarkFrontmatterOrgsFilterListInput>;
  readonly page_img: InputMaybe<StringQueryOperatorInput>;
  readonly party: InputMaybe<StringQueryOperatorInput>;
  readonly permalink: InputMaybe<StringQueryOperatorInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
  readonly photo: InputMaybe<StringQueryOperatorInput>;
  readonly pledge: InputMaybe<BooleanQueryOperatorInput>;
  readonly progressive_vote: InputMaybe<StringQueryOperatorInput>;
  readonly questions: InputMaybe<MarkdownRemarkFrontmatterQuestionsFilterListInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly references: InputMaybe<MarkdownRemarkFrontmatterReferencesFilterListInput>;
  readonly scripts: InputMaybe<MarkdownRemarkFrontmatterScriptsFilterInput>;
  readonly scripts_com_vote: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteFilterInput>;
  readonly senate_chair: InputMaybe<StringQueryOperatorInput>;
  readonly senate_lead_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly senate_link: InputMaybe<StringQueryOperatorInput>;
  readonly senate_members: InputMaybe<StringQueryOperatorInput>;
  readonly senate_no: InputMaybe<StringQueryOperatorInput>;
  readonly senate_vice_chair: InputMaybe<StringQueryOperatorInput>;
  readonly square_picture: InputMaybe<StringQueryOperatorInput>;
  readonly start_date: InputMaybe<DateQueryOperatorInput>;
  readonly styles: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly summary: InputMaybe<StringQueryOperatorInput>;
  readonly supports_the_campaign: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_committee_votes: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_public_bills: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_term_limits: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly timeline: InputMaybe<MarkdownRemarkFrontmatterTimelineFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_bill_name: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly van_id: InputMaybe<StringQueryOperatorInput>;
  readonly video: InputMaybe<StringQueryOperatorInput>;
  readonly vote_descriptions: InputMaybe<MarkdownRemarkFrontmatterVote_descriptionsFilterInput>;
  readonly votes: InputMaybe<MarkdownRemarkFrontmatterVotesFilterListInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeader = {
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeaderFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHeaderFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeaderFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterHeaderFilterInput>;
};

type MarkdownRemarkFrontmatterHeaderSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterHistory = {
  readonly bill_event: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatterHistory_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHistoryFieldSelector = {
  readonly bill_event: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterHistoryFilterInput = {
  readonly bill_event: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHistoryFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterHistoryFilterInput>;
};

type MarkdownRemarkFrontmatterHistorySortInput = {
  readonly bill_event: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterLearn_more = {
  readonly img: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterLearn_moreFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterLearn_moreFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterLearn_moreFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterLearn_moreFilterInput>;
};

type MarkdownRemarkFrontmatterLearn_moreSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterOrgs = {
  readonly img: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterOrgsFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterOrgsFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterOrgsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterOrgsFilterInput>;
};

type MarkdownRemarkFrontmatterOrgsSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterQuestions = {
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterQuestionsFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterQuestionsFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterQuestionsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterQuestionsFilterInput>;
};

type MarkdownRemarkFrontmatterQuestionsSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterReferences = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterReferencesFieldSelector = {
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterReferencesFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterReferencesFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterReferencesFilterInput>;
};

type MarkdownRemarkFrontmatterReferencesSortInput = {
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterScripts = {
  readonly call_request: Maybe<Scalars['String']>;
  readonly email_request: Maybe<MarkdownRemarkFrontmatterScriptsEmail_request>;
  readonly tweet_after_thanks_call: Maybe<Scalars['String']>;
  readonly tweet_thanks: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterScriptsEmail_request = {
  readonly body: Maybe<Scalars['String']>;
  readonly subject: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterScriptsEmail_requestFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly subject: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterScriptsEmail_requestFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterScriptsEmail_requestSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly subject: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterScriptsFieldSelector = {
  readonly call_request: InputMaybe<FieldSelectorEnum>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScriptsEmail_requestFieldSelector>;
  readonly tweet_after_thanks_call: InputMaybe<FieldSelectorEnum>;
  readonly tweet_thanks: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterScriptsFilterInput = {
  readonly call_request: InputMaybe<StringQueryOperatorInput>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScriptsEmail_requestFilterInput>;
  readonly tweet_after_thanks_call: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_thanks: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterScriptsSortInput = {
  readonly call_request: InputMaybe<SortOrderEnum>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScriptsEmail_requestSortInput>;
  readonly tweet_after_thanks_call: InputMaybe<SortOrderEnum>;
  readonly tweet_thanks: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterScripts_com_vote = {
  readonly call_request: Maybe<Scalars['String']>;
  readonly email_request: Maybe<MarkdownRemarkFrontmatterScripts_com_voteEmail_request>;
};

type MarkdownRemarkFrontmatterScripts_com_voteEmail_request = {
  readonly body: Maybe<Scalars['String']>;
  readonly subject: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterScripts_com_voteEmail_requestFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly subject: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterScripts_com_voteEmail_requestFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterScripts_com_voteEmail_requestSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly subject: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterScripts_com_voteFieldSelector = {
  readonly call_request: InputMaybe<FieldSelectorEnum>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteEmail_requestFieldSelector>;
};

type MarkdownRemarkFrontmatterScripts_com_voteFilterInput = {
  readonly call_request: InputMaybe<StringQueryOperatorInput>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteEmail_requestFilterInput>;
};

type MarkdownRemarkFrontmatterScripts_com_voteSortInput = {
  readonly call_request: InputMaybe<SortOrderEnum>;
  readonly email_request: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteEmail_requestSortInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly article: InputMaybe<SortOrderEnum>;
  readonly author: InputMaybe<SortOrderEnum>;
  readonly bill: InputMaybe<SortOrderEnum>;
  readonly bills_to_support_title: InputMaybe<SortOrderEnum>;
  readonly catchphrase: InputMaybe<SortOrderEnum>;
  readonly category: InputMaybe<SortOrderEnum>;
  readonly chamber: InputMaybe<SortOrderEnum>;
  readonly co_sponsors: InputMaybe<SortOrderEnum>;
  readonly committee: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly district: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly end_date: InputMaybe<SortOrderEnum>;
  readonly endorsing_orgs: InputMaybe<MarkdownRemarkFrontmatterEndorsing_orgsSortInput>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly failures: InputMaybe<MarkdownRemarkFrontmatterFailuresSortInput>;
  readonly failures_block_title: InputMaybe<SortOrderEnum>;
  readonly first_name: InputMaybe<SortOrderEnum>;
  readonly formatted_url: InputMaybe<SortOrderEnum>;
  readonly full_title: InputMaybe<SortOrderEnum>;
  readonly header: InputMaybe<MarkdownRemarkFrontmatterHeaderSortInput>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly highlighted_bills: InputMaybe<SortOrderEnum>;
  readonly history: InputMaybe<MarkdownRemarkFrontmatterHistorySortInput>;
  readonly hometown: InputMaybe<SortOrderEnum>;
  readonly house_chair: InputMaybe<SortOrderEnum>;
  readonly house_lead_sponsors: InputMaybe<SortOrderEnum>;
  readonly house_link: InputMaybe<SortOrderEnum>;
  readonly house_members: InputMaybe<SortOrderEnum>;
  readonly house_no: InputMaybe<SortOrderEnum>;
  readonly house_vice_chair: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly img: InputMaybe<SortOrderEnum>;
  readonly img_folder: InputMaybe<SortOrderEnum>;
  readonly issue: InputMaybe<SortOrderEnum>;
  readonly last_name: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly learn_more: InputMaybe<MarkdownRemarkFrontmatterLearn_moreSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly lng: InputMaybe<SortOrderEnum>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly malegislature_url: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly no_sponsorship_data: InputMaybe<SortOrderEnum>;
  readonly ocd_id: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly orgs: InputMaybe<MarkdownRemarkFrontmatterOrgsSortInput>;
  readonly page_img: InputMaybe<SortOrderEnum>;
  readonly party: InputMaybe<SortOrderEnum>;
  readonly permalink: InputMaybe<SortOrderEnum>;
  readonly phone: InputMaybe<SortOrderEnum>;
  readonly photo: InputMaybe<SortOrderEnum>;
  readonly pledge: InputMaybe<SortOrderEnum>;
  readonly progressive_vote: InputMaybe<SortOrderEnum>;
  readonly questions: InputMaybe<MarkdownRemarkFrontmatterQuestionsSortInput>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly references: InputMaybe<MarkdownRemarkFrontmatterReferencesSortInput>;
  readonly scripts: InputMaybe<MarkdownRemarkFrontmatterScriptsSortInput>;
  readonly scripts_com_vote: InputMaybe<MarkdownRemarkFrontmatterScripts_com_voteSortInput>;
  readonly senate_chair: InputMaybe<SortOrderEnum>;
  readonly senate_lead_sponsors: InputMaybe<SortOrderEnum>;
  readonly senate_link: InputMaybe<SortOrderEnum>;
  readonly senate_members: InputMaybe<SortOrderEnum>;
  readonly senate_no: InputMaybe<SortOrderEnum>;
  readonly senate_vice_chair: InputMaybe<SortOrderEnum>;
  readonly square_picture: InputMaybe<SortOrderEnum>;
  readonly start_date: InputMaybe<SortOrderEnum>;
  readonly styles: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly summary: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly timeline: InputMaybe<MarkdownRemarkFrontmatterTimelineSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly twitter_bill_name: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly van_id: InputMaybe<SortOrderEnum>;
  readonly video: InputMaybe<SortOrderEnum>;
  readonly vote_descriptions: InputMaybe<MarkdownRemarkFrontmatterVote_descriptionsSortInput>;
  readonly votes: InputMaybe<MarkdownRemarkFrontmatterVotesSortInput>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTimeline = {
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatterTimeline_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTimelineFieldSelector = {
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTimelineFilterInput = {
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTimelineFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTimelineFilterInput>;
};

type MarkdownRemarkFrontmatterTimelineSortInput = {
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterVote_descriptions = {
  readonly no: Maybe<Scalars['String']>;
  readonly unk: Maybe<Scalars['String']>;
  readonly yes: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterVote_descriptionsFieldSelector = {
  readonly no: InputMaybe<FieldSelectorEnum>;
  readonly unk: InputMaybe<FieldSelectorEnum>;
  readonly yes: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterVote_descriptionsFilterInput = {
  readonly no: InputMaybe<StringQueryOperatorInput>;
  readonly unk: InputMaybe<StringQueryOperatorInput>;
  readonly yes: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterVote_descriptionsSortInput = {
  readonly no: InputMaybe<SortOrderEnum>;
  readonly unk: InputMaybe<SortOrderEnum>;
  readonly yes: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterVotes = {
  readonly legislator: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterVotesFieldSelector = {
  readonly legislator: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterVotesFilterInput = {
  readonly legislator: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterVotesFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterVotesFilterInput>;
};

type MarkdownRemarkFrontmatterVotesSortInput = {
  readonly legislator: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly fileAbsolutePath: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

type Mdx = Node & {
  readonly body: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type MdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFilterInput>;
};

type MdxFrontmatter = {
  readonly aom_id: Maybe<Scalars['String']>;
  readonly article: Maybe<Scalars['String']>;
  readonly author: Maybe<Scalars['String']>;
  readonly bill: Maybe<Scalars['String']>;
  readonly bills_to_support_title: Maybe<Scalars['String']>;
  readonly catchphrase: Maybe<Scalars['String']>;
  readonly category: Maybe<Scalars['String']>;
  readonly chamber: Maybe<Scalars['String']>;
  readonly co_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly committee: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly district: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly end_date: Maybe<Scalars['String']>;
  readonly endorsing_orgs: Maybe<ReadonlyArray<Maybe<MdxFrontmatterEndorsing_orgs>>>;
  readonly extract: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly failures: Maybe<ReadonlyArray<Maybe<MdxFrontmatterFailures>>>;
  readonly failures_block_title: Maybe<Scalars['String']>;
  readonly first_name: Maybe<Scalars['String']>;
  readonly formatted_url: Maybe<Scalars['String']>;
  readonly full_title: Maybe<Scalars['String']>;
  readonly header: Maybe<ReadonlyArray<Maybe<MdxFrontmatterHeader>>>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly highlighted_bills: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly history: Maybe<ReadonlyArray<Maybe<MdxFrontmatterHistory>>>;
  readonly hometown: Maybe<Scalars['String']>;
  readonly house_chair: Maybe<Scalars['String']>;
  readonly house_lead_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly house_link: Maybe<Scalars['String']>;
  readonly house_members: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly house_no: Maybe<Scalars['String']>;
  readonly house_vice_chair: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly img: Maybe<Scalars['String']>;
  readonly img_folder: Maybe<Scalars['String']>;
  readonly issue: Maybe<Scalars['String']>;
  readonly last_name: Maybe<Scalars['String']>;
  readonly lat: Maybe<Scalars['Float']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly learn_more: Maybe<ReadonlyArray<Maybe<MdxFrontmatterLearn_more>>>;
  readonly link: Maybe<Scalars['String']>;
  readonly lng: Maybe<Scalars['Float']>;
  readonly logo: Maybe<Scalars['String']>;
  readonly malegislature_url: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly no_sponsorship_data: Maybe<Scalars['Boolean']>;
  readonly ocd_id: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly orgs: Maybe<ReadonlyArray<Maybe<MdxFrontmatterOrgs>>>;
  readonly page_img: Maybe<Scalars['String']>;
  readonly party: Maybe<Scalars['String']>;
  readonly permalink: Maybe<Scalars['String']>;
  readonly phone: Maybe<Scalars['String']>;
  readonly photo: Maybe<Scalars['String']>;
  readonly pledge: Maybe<Scalars['Boolean']>;
  readonly progressive_vote: Maybe<Scalars['String']>;
  readonly questions: Maybe<ReadonlyArray<Maybe<MdxFrontmatterQuestions>>>;
  readonly redirect_from: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly references: Maybe<ReadonlyArray<Maybe<MdxFrontmatterReferences>>>;
  readonly scripts: Maybe<MdxFrontmatterScripts>;
  readonly scripts_com_vote: Maybe<MdxFrontmatterScripts_com_vote>;
  readonly senate_chair: Maybe<Scalars['String']>;
  readonly senate_lead_sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly senate_link: Maybe<Scalars['String']>;
  readonly senate_members: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly senate_no: Maybe<Scalars['String']>;
  readonly senate_vice_chair: Maybe<Scalars['String']>;
  readonly square_picture: Maybe<Scalars['String']>;
  readonly start_date: Maybe<Scalars['Date']>;
  readonly styles: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly summary: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly supports_the_campaign: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_committee_votes: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_public_bills: Maybe<Scalars['Boolean']>;
  readonly supports_the_campaign_term_limits: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<Scalars['String']>;
  readonly timeline: Maybe<ReadonlyArray<Maybe<MdxFrontmatterTimeline>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly twitter_bill_name: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['String']>;
  readonly van_id: Maybe<Scalars['String']>;
  readonly video: Maybe<Scalars['String']>;
  readonly vote_descriptions: Maybe<MdxFrontmatterVote_descriptions>;
  readonly votes: Maybe<ReadonlyArray<Maybe<MdxFrontmatterVotes>>>;
  readonly website: Maybe<Scalars['String']>;
};


type MdxFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MdxFrontmatter_start_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterEndorsing_orgs = {
  readonly img: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterEndorsing_orgsFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterEndorsing_orgsFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterEndorsing_orgsFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterEndorsing_orgsFilterInput>;
};

type MdxFrontmatterEndorsing_orgsSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterFailures = {
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterFailuresFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterFailuresFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterFailuresFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterFailuresFilterInput>;
};

type MdxFrontmatterFailuresSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterFieldSelector = {
  readonly aom_id: InputMaybe<FieldSelectorEnum>;
  readonly article: InputMaybe<FieldSelectorEnum>;
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly bill: InputMaybe<FieldSelectorEnum>;
  readonly bills_to_support_title: InputMaybe<FieldSelectorEnum>;
  readonly catchphrase: InputMaybe<FieldSelectorEnum>;
  readonly category: InputMaybe<FieldSelectorEnum>;
  readonly chamber: InputMaybe<FieldSelectorEnum>;
  readonly co_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly committee: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly district: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly end_date: InputMaybe<FieldSelectorEnum>;
  readonly endorsing_orgs: InputMaybe<MdxFrontmatterEndorsing_orgsFieldSelector>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly failures: InputMaybe<MdxFrontmatterFailuresFieldSelector>;
  readonly failures_block_title: InputMaybe<FieldSelectorEnum>;
  readonly first_name: InputMaybe<FieldSelectorEnum>;
  readonly formatted_url: InputMaybe<FieldSelectorEnum>;
  readonly full_title: InputMaybe<FieldSelectorEnum>;
  readonly header: InputMaybe<MdxFrontmatterHeaderFieldSelector>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly highlighted_bills: InputMaybe<FieldSelectorEnum>;
  readonly history: InputMaybe<MdxFrontmatterHistoryFieldSelector>;
  readonly hometown: InputMaybe<FieldSelectorEnum>;
  readonly house_chair: InputMaybe<FieldSelectorEnum>;
  readonly house_lead_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly house_link: InputMaybe<FieldSelectorEnum>;
  readonly house_members: InputMaybe<FieldSelectorEnum>;
  readonly house_no: InputMaybe<FieldSelectorEnum>;
  readonly house_vice_chair: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly img_folder: InputMaybe<FieldSelectorEnum>;
  readonly issue: InputMaybe<FieldSelectorEnum>;
  readonly last_name: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly learn_more: InputMaybe<MdxFrontmatterLearn_moreFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly lng: InputMaybe<FieldSelectorEnum>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly malegislature_url: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly no_sponsorship_data: InputMaybe<FieldSelectorEnum>;
  readonly ocd_id: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly orgs: InputMaybe<MdxFrontmatterOrgsFieldSelector>;
  readonly page_img: InputMaybe<FieldSelectorEnum>;
  readonly party: InputMaybe<FieldSelectorEnum>;
  readonly permalink: InputMaybe<FieldSelectorEnum>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
  readonly photo: InputMaybe<FieldSelectorEnum>;
  readonly pledge: InputMaybe<FieldSelectorEnum>;
  readonly progressive_vote: InputMaybe<FieldSelectorEnum>;
  readonly questions: InputMaybe<MdxFrontmatterQuestionsFieldSelector>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly references: InputMaybe<MdxFrontmatterReferencesFieldSelector>;
  readonly scripts: InputMaybe<MdxFrontmatterScriptsFieldSelector>;
  readonly scripts_com_vote: InputMaybe<MdxFrontmatterScripts_com_voteFieldSelector>;
  readonly senate_chair: InputMaybe<FieldSelectorEnum>;
  readonly senate_lead_sponsors: InputMaybe<FieldSelectorEnum>;
  readonly senate_link: InputMaybe<FieldSelectorEnum>;
  readonly senate_members: InputMaybe<FieldSelectorEnum>;
  readonly senate_no: InputMaybe<FieldSelectorEnum>;
  readonly senate_vice_chair: InputMaybe<FieldSelectorEnum>;
  readonly square_picture: InputMaybe<FieldSelectorEnum>;
  readonly start_date: InputMaybe<FieldSelectorEnum>;
  readonly styles: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly summary: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<FieldSelectorEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly timeline: InputMaybe<MdxFrontmatterTimelineFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly twitter_bill_name: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly van_id: InputMaybe<FieldSelectorEnum>;
  readonly video: InputMaybe<FieldSelectorEnum>;
  readonly vote_descriptions: InputMaybe<MdxFrontmatterVote_descriptionsFieldSelector>;
  readonly votes: InputMaybe<MdxFrontmatterVotesFieldSelector>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterFilterInput = {
  readonly aom_id: InputMaybe<StringQueryOperatorInput>;
  readonly article: InputMaybe<StringQueryOperatorInput>;
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly bill: InputMaybe<StringQueryOperatorInput>;
  readonly bills_to_support_title: InputMaybe<StringQueryOperatorInput>;
  readonly catchphrase: InputMaybe<StringQueryOperatorInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly chamber: InputMaybe<StringQueryOperatorInput>;
  readonly co_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly committee: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly district: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly end_date: InputMaybe<StringQueryOperatorInput>;
  readonly endorsing_orgs: InputMaybe<MdxFrontmatterEndorsing_orgsFilterListInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly failures: InputMaybe<MdxFrontmatterFailuresFilterListInput>;
  readonly failures_block_title: InputMaybe<StringQueryOperatorInput>;
  readonly first_name: InputMaybe<StringQueryOperatorInput>;
  readonly formatted_url: InputMaybe<StringQueryOperatorInput>;
  readonly full_title: InputMaybe<StringQueryOperatorInput>;
  readonly header: InputMaybe<MdxFrontmatterHeaderFilterListInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly highlighted_bills: InputMaybe<StringQueryOperatorInput>;
  readonly history: InputMaybe<MdxFrontmatterHistoryFilterListInput>;
  readonly hometown: InputMaybe<StringQueryOperatorInput>;
  readonly house_chair: InputMaybe<StringQueryOperatorInput>;
  readonly house_lead_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly house_link: InputMaybe<StringQueryOperatorInput>;
  readonly house_members: InputMaybe<StringQueryOperatorInput>;
  readonly house_no: InputMaybe<StringQueryOperatorInput>;
  readonly house_vice_chair: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly img_folder: InputMaybe<StringQueryOperatorInput>;
  readonly issue: InputMaybe<StringQueryOperatorInput>;
  readonly last_name: InputMaybe<StringQueryOperatorInput>;
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly learn_more: InputMaybe<MdxFrontmatterLearn_moreFilterListInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly lng: InputMaybe<FloatQueryOperatorInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly malegislature_url: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly no_sponsorship_data: InputMaybe<BooleanQueryOperatorInput>;
  readonly ocd_id: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly orgs: InputMaybe<MdxFrontmatterOrgsFilterListInput>;
  readonly page_img: InputMaybe<StringQueryOperatorInput>;
  readonly party: InputMaybe<StringQueryOperatorInput>;
  readonly permalink: InputMaybe<StringQueryOperatorInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
  readonly photo: InputMaybe<StringQueryOperatorInput>;
  readonly pledge: InputMaybe<BooleanQueryOperatorInput>;
  readonly progressive_vote: InputMaybe<StringQueryOperatorInput>;
  readonly questions: InputMaybe<MdxFrontmatterQuestionsFilterListInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly references: InputMaybe<MdxFrontmatterReferencesFilterListInput>;
  readonly scripts: InputMaybe<MdxFrontmatterScriptsFilterInput>;
  readonly scripts_com_vote: InputMaybe<MdxFrontmatterScripts_com_voteFilterInput>;
  readonly senate_chair: InputMaybe<StringQueryOperatorInput>;
  readonly senate_lead_sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly senate_link: InputMaybe<StringQueryOperatorInput>;
  readonly senate_members: InputMaybe<StringQueryOperatorInput>;
  readonly senate_no: InputMaybe<StringQueryOperatorInput>;
  readonly senate_vice_chair: InputMaybe<StringQueryOperatorInput>;
  readonly square_picture: InputMaybe<StringQueryOperatorInput>;
  readonly start_date: InputMaybe<DateQueryOperatorInput>;
  readonly styles: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly summary: InputMaybe<StringQueryOperatorInput>;
  readonly supports_the_campaign: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_committee_votes: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_public_bills: InputMaybe<BooleanQueryOperatorInput>;
  readonly supports_the_campaign_term_limits: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly timeline: InputMaybe<MdxFrontmatterTimelineFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly twitter_bill_name: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly van_id: InputMaybe<StringQueryOperatorInput>;
  readonly video: InputMaybe<StringQueryOperatorInput>;
  readonly vote_descriptions: InputMaybe<MdxFrontmatterVote_descriptionsFilterInput>;
  readonly votes: InputMaybe<MdxFrontmatterVotesFilterListInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterHeader = {
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterHeaderFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterHeaderFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterHeaderFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterHeaderFilterInput>;
};

type MdxFrontmatterHeaderSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterHistory = {
  readonly bill_event: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type MdxFrontmatterHistory_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterHistoryFieldSelector = {
  readonly bill_event: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterHistoryFilterInput = {
  readonly bill_event: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterHistoryFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterHistoryFilterInput>;
};

type MdxFrontmatterHistorySortInput = {
  readonly bill_event: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterLearn_more = {
  readonly img: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterLearn_moreFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterLearn_moreFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterLearn_moreFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterLearn_moreFilterInput>;
};

type MdxFrontmatterLearn_moreSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterOrgs = {
  readonly img: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterOrgsFieldSelector = {
  readonly img: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterOrgsFilterInput = {
  readonly img: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterOrgsFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterOrgsFilterInput>;
};

type MdxFrontmatterOrgsSortInput = {
  readonly img: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterQuestions = {
  readonly text: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterQuestionsFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterQuestionsFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterQuestionsFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterQuestionsFilterInput>;
};

type MdxFrontmatterQuestionsSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterReferences = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MdxFrontmatterReferencesFieldSelector = {
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterReferencesFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterReferencesFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterReferencesFilterInput>;
};

type MdxFrontmatterReferencesSortInput = {
  readonly link: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterScripts = {
  readonly call_request: Maybe<Scalars['String']>;
  readonly email_request: Maybe<MdxFrontmatterScriptsEmail_request>;
  readonly tweet_after_thanks_call: Maybe<Scalars['String']>;
  readonly tweet_thanks: Maybe<Scalars['String']>;
};

type MdxFrontmatterScriptsEmail_request = {
  readonly body: Maybe<Scalars['String']>;
  readonly subject: Maybe<Scalars['String']>;
};

type MdxFrontmatterScriptsEmail_requestFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly subject: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterScriptsEmail_requestFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterScriptsEmail_requestSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly subject: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterScriptsFieldSelector = {
  readonly call_request: InputMaybe<FieldSelectorEnum>;
  readonly email_request: InputMaybe<MdxFrontmatterScriptsEmail_requestFieldSelector>;
  readonly tweet_after_thanks_call: InputMaybe<FieldSelectorEnum>;
  readonly tweet_thanks: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterScriptsFilterInput = {
  readonly call_request: InputMaybe<StringQueryOperatorInput>;
  readonly email_request: InputMaybe<MdxFrontmatterScriptsEmail_requestFilterInput>;
  readonly tweet_after_thanks_call: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_thanks: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterScriptsSortInput = {
  readonly call_request: InputMaybe<SortOrderEnum>;
  readonly email_request: InputMaybe<MdxFrontmatterScriptsEmail_requestSortInput>;
  readonly tweet_after_thanks_call: InputMaybe<SortOrderEnum>;
  readonly tweet_thanks: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterScripts_com_vote = {
  readonly call_request: Maybe<Scalars['String']>;
  readonly email_request: Maybe<MdxFrontmatterScripts_com_voteEmail_request>;
};

type MdxFrontmatterScripts_com_voteEmail_request = {
  readonly body: Maybe<Scalars['String']>;
  readonly subject: Maybe<Scalars['String']>;
};

type MdxFrontmatterScripts_com_voteEmail_requestFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly subject: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterScripts_com_voteEmail_requestFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly subject: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterScripts_com_voteEmail_requestSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly subject: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterScripts_com_voteFieldSelector = {
  readonly call_request: InputMaybe<FieldSelectorEnum>;
  readonly email_request: InputMaybe<MdxFrontmatterScripts_com_voteEmail_requestFieldSelector>;
};

type MdxFrontmatterScripts_com_voteFilterInput = {
  readonly call_request: InputMaybe<StringQueryOperatorInput>;
  readonly email_request: InputMaybe<MdxFrontmatterScripts_com_voteEmail_requestFilterInput>;
};

type MdxFrontmatterScripts_com_voteSortInput = {
  readonly call_request: InputMaybe<SortOrderEnum>;
  readonly email_request: InputMaybe<MdxFrontmatterScripts_com_voteEmail_requestSortInput>;
};

type MdxFrontmatterSortInput = {
  readonly aom_id: InputMaybe<SortOrderEnum>;
  readonly article: InputMaybe<SortOrderEnum>;
  readonly author: InputMaybe<SortOrderEnum>;
  readonly bill: InputMaybe<SortOrderEnum>;
  readonly bills_to_support_title: InputMaybe<SortOrderEnum>;
  readonly catchphrase: InputMaybe<SortOrderEnum>;
  readonly category: InputMaybe<SortOrderEnum>;
  readonly chamber: InputMaybe<SortOrderEnum>;
  readonly co_sponsors: InputMaybe<SortOrderEnum>;
  readonly committee: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly district: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly end_date: InputMaybe<SortOrderEnum>;
  readonly endorsing_orgs: InputMaybe<MdxFrontmatterEndorsing_orgsSortInput>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly failures: InputMaybe<MdxFrontmatterFailuresSortInput>;
  readonly failures_block_title: InputMaybe<SortOrderEnum>;
  readonly first_name: InputMaybe<SortOrderEnum>;
  readonly formatted_url: InputMaybe<SortOrderEnum>;
  readonly full_title: InputMaybe<SortOrderEnum>;
  readonly header: InputMaybe<MdxFrontmatterHeaderSortInput>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly highlighted_bills: InputMaybe<SortOrderEnum>;
  readonly history: InputMaybe<MdxFrontmatterHistorySortInput>;
  readonly hometown: InputMaybe<SortOrderEnum>;
  readonly house_chair: InputMaybe<SortOrderEnum>;
  readonly house_lead_sponsors: InputMaybe<SortOrderEnum>;
  readonly house_link: InputMaybe<SortOrderEnum>;
  readonly house_members: InputMaybe<SortOrderEnum>;
  readonly house_no: InputMaybe<SortOrderEnum>;
  readonly house_vice_chair: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly img: InputMaybe<SortOrderEnum>;
  readonly img_folder: InputMaybe<SortOrderEnum>;
  readonly issue: InputMaybe<SortOrderEnum>;
  readonly last_name: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly learn_more: InputMaybe<MdxFrontmatterLearn_moreSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly lng: InputMaybe<SortOrderEnum>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly malegislature_url: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly no_sponsorship_data: InputMaybe<SortOrderEnum>;
  readonly ocd_id: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly orgs: InputMaybe<MdxFrontmatterOrgsSortInput>;
  readonly page_img: InputMaybe<SortOrderEnum>;
  readonly party: InputMaybe<SortOrderEnum>;
  readonly permalink: InputMaybe<SortOrderEnum>;
  readonly phone: InputMaybe<SortOrderEnum>;
  readonly photo: InputMaybe<SortOrderEnum>;
  readonly pledge: InputMaybe<SortOrderEnum>;
  readonly progressive_vote: InputMaybe<SortOrderEnum>;
  readonly questions: InputMaybe<MdxFrontmatterQuestionsSortInput>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly references: InputMaybe<MdxFrontmatterReferencesSortInput>;
  readonly scripts: InputMaybe<MdxFrontmatterScriptsSortInput>;
  readonly scripts_com_vote: InputMaybe<MdxFrontmatterScripts_com_voteSortInput>;
  readonly senate_chair: InputMaybe<SortOrderEnum>;
  readonly senate_lead_sponsors: InputMaybe<SortOrderEnum>;
  readonly senate_link: InputMaybe<SortOrderEnum>;
  readonly senate_members: InputMaybe<SortOrderEnum>;
  readonly senate_no: InputMaybe<SortOrderEnum>;
  readonly senate_vice_chair: InputMaybe<SortOrderEnum>;
  readonly square_picture: InputMaybe<SortOrderEnum>;
  readonly start_date: InputMaybe<SortOrderEnum>;
  readonly styles: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly summary: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_committee_votes: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_public_bills: InputMaybe<SortOrderEnum>;
  readonly supports_the_campaign_term_limits: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly timeline: InputMaybe<MdxFrontmatterTimelineSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly twitter_bill_name: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly van_id: InputMaybe<SortOrderEnum>;
  readonly video: InputMaybe<SortOrderEnum>;
  readonly vote_descriptions: InputMaybe<MdxFrontmatterVote_descriptionsSortInput>;
  readonly votes: InputMaybe<MdxFrontmatterVotesSortInput>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterTimeline = {
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
};


type MdxFrontmatterTimeline_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterTimelineFieldSelector = {
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterTimelineFilterInput = {
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterTimelineFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterTimelineFilterInput>;
};

type MdxFrontmatterTimelineSortInput = {
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterVote_descriptions = {
  readonly no: Maybe<Scalars['String']>;
  readonly unk: Maybe<Scalars['String']>;
  readonly yes: Maybe<Scalars['String']>;
};

type MdxFrontmatterVote_descriptionsFieldSelector = {
  readonly no: InputMaybe<FieldSelectorEnum>;
  readonly unk: InputMaybe<FieldSelectorEnum>;
  readonly yes: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterVote_descriptionsFilterInput = {
  readonly no: InputMaybe<StringQueryOperatorInput>;
  readonly unk: InputMaybe<StringQueryOperatorInput>;
  readonly yes: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterVote_descriptionsSortInput = {
  readonly no: InputMaybe<SortOrderEnum>;
  readonly unk: InputMaybe<SortOrderEnum>;
  readonly yes: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterVotes = {
  readonly legislator: Maybe<Scalars['String']>;
};

type MdxFrontmatterVotesFieldSelector = {
  readonly legislator: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterVotesFilterInput = {
  readonly legislator: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterVotesFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterVotesFilterInput>;
};

type MdxFrontmatterVotesSortInput = {
  readonly legislator: InputMaybe<SortOrderEnum>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

type News = Node & {
  readonly author: Scalars['String'];
  readonly category: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly date: Scalars['String'];
  readonly extract: Maybe<Scalars['String']>;
  readonly fileName: Scalars['String'];
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly title: Scalars['String'];
};

type NewsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NewsEdge>;
  readonly group: ReadonlyArray<NewsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<News>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NewsConnection_distinctArgs = {
  field: NewsFieldSelector;
};


type NewsConnection_groupArgs = {
  field: NewsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NewsConnection_maxArgs = {
  field: NewsFieldSelector;
};


type NewsConnection_minArgs = {
  field: NewsFieldSelector;
};


type NewsConnection_sumArgs = {
  field: NewsFieldSelector;
};

type NewsEdge = {
  readonly next: Maybe<News>;
  readonly node: News;
  readonly previous: Maybe<News>;
};

type NewsFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly category: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type NewsFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly date: InputMaybe<StringQueryOperatorInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type NewsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NewsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<NewsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<News>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NewsGroupConnection_distinctArgs = {
  field: NewsFieldSelector;
};


type NewsGroupConnection_groupArgs = {
  field: NewsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NewsGroupConnection_maxArgs = {
  field: NewsFieldSelector;
};


type NewsGroupConnection_minArgs = {
  field: NewsFieldSelector;
};


type NewsGroupConnection_sumArgs = {
  field: NewsFieldSelector;
};

type NewsSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly category: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type Page = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly layout: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly permalink: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type PageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageEdge>;
  readonly group: ReadonlyArray<PageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageConnection_distinctArgs = {
  field: PageFieldSelector;
};


type PageConnection_groupArgs = {
  field: PageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageConnection_maxArgs = {
  field: PageFieldSelector;
};


type PageConnection_minArgs = {
  field: PageFieldSelector;
};


type PageConnection_sumArgs = {
  field: PageFieldSelector;
};

type PageEdge = {
  readonly next: Maybe<Page>;
  readonly node: Page;
  readonly previous: Maybe<Page>;
};

type PageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly permalink: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly permalink: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageGroupConnection_distinctArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_groupArgs = {
  field: PageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageGroupConnection_maxArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_minArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_sumArgs = {
  field: PageFieldSelector;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type PageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly permalink: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Post = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly date: Maybe<Scalars['Date']>;
  readonly fileName: Scalars['String'];
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly redirect_from: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly title: Maybe<Scalars['String']>;
};

type PostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PostEdge>;
  readonly group: ReadonlyArray<PostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Post>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PostConnection_distinctArgs = {
  field: PostFieldSelector;
};


type PostConnection_groupArgs = {
  field: PostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PostConnection_maxArgs = {
  field: PostFieldSelector;
};


type PostConnection_minArgs = {
  field: PostFieldSelector;
};


type PostConnection_sumArgs = {
  field: PostFieldSelector;
};

type PostEdge = {
  readonly next: Maybe<Post>;
  readonly node: Post;
  readonly previous: Maybe<Post>;
};

type PostFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PostFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Post>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PostGroupConnection_distinctArgs = {
  field: PostFieldSelector;
};


type PostGroupConnection_groupArgs = {
  field: PostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PostGroupConnection_maxArgs = {
  field: PostFieldSelector;
};


type PostGroupConnection_minArgs = {
  field: PostFieldSelector;
};


type PostGroupConnection_sumArgs = {
  field: PostFieldSelector;
};

type PostSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allBill: BillConnection;
  readonly allBillEvent: BillEventConnection;
  readonly allCommittee: CommitteeConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allDistrict: DistrictConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allIssue: IssueConnection;
  readonly allLegislator: LegislatorConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allMdx: MdxConnection;
  readonly allNews: NewsConnection;
  readonly allPage: PageConnection;
  readonly allPost: PostConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allTeamMember: TeamMemberConnection;
  readonly bill: Maybe<Bill>;
  readonly billEvent: Maybe<BillEvent>;
  readonly committee: Maybe<Committee>;
  readonly directory: Maybe<Directory>;
  readonly district: Maybe<District>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly issue: Maybe<Issue>;
  readonly legislator: Maybe<Legislator>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly mdx: Maybe<Mdx>;
  readonly news: Maybe<News>;
  readonly page: Maybe<Page>;
  readonly post: Maybe<Post>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly teamMember: Maybe<TeamMember>;
};


type Query_allBillArgs = {
  filter: InputMaybe<BillFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<BillSortInput>>>;
};


type Query_allBillEventArgs = {
  filter: InputMaybe<BillEventFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<BillEventSortInput>>>;
};


type Query_allCommitteeArgs = {
  filter: InputMaybe<CommitteeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<CommitteeSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allDistrictArgs = {
  filter: InputMaybe<DistrictFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DistrictSortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allIssueArgs = {
  filter: InputMaybe<IssueFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<IssueSortInput>>>;
};


type Query_allLegislatorArgs = {
  filter: InputMaybe<LegislatorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LegislatorSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MdxSortInput>>>;
};


type Query_allNewsArgs = {
  filter: InputMaybe<NewsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<NewsSortInput>>>;
};


type Query_allPageArgs = {
  filter: InputMaybe<PageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PageSortInput>>>;
};


type Query_allPostArgs = {
  filter: InputMaybe<PostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PostSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allTeamMemberArgs = {
  filter: InputMaybe<TeamMemberFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<TeamMemberSortInput>>>;
};


type Query_billArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  article: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  co_sponsors: InputMaybe<LegislatorFilterListInput>;
  committee: InputMaybe<CommitteeFilterInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  full_title: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  hidden: InputMaybe<BooleanQueryOperatorInput>;
  history: InputMaybe<BillHistoryItemFilterListInput>;
  house_lead_sponsors: InputMaybe<LegislatorFilterListInput>;
  house_link: InputMaybe<StringQueryOperatorInput>;
  house_no: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  img: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  issue: InputMaybe<IssueFilterInput>;
  no_sponsorship_data: InputMaybe<BooleanQueryOperatorInput>;
  orgs: InputMaybe<LinkWithImgFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  scripts: InputMaybe<ScriptFilterInput>;
  scripts_com_vote: InputMaybe<ScriptFilterInput>;
  senate_lead_sponsors: InputMaybe<LegislatorFilterListInput>;
  senate_link: InputMaybe<StringQueryOperatorInput>;
  senate_no: InputMaybe<StringQueryOperatorInput>;
  summary: InputMaybe<StringQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  timeline: InputMaybe<BillTimelineItemFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter_bill_name: InputMaybe<StringQueryOperatorInput>;
};


type Query_billEventArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  bill: InputMaybe<BillFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  progressive_vote: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  vote_descriptions: InputMaybe<BillEventVoteDescFilterInput>;
  votes: InputMaybe<BillEventVoteFilterListInput>;
};


type Query_committeeArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  chamber: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  house_chair: InputMaybe<LegislatorFilterInput>;
  house_members: InputMaybe<LegislatorFilterListInput>;
  house_vice_chair: InputMaybe<LegislatorFilterInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  malegislature_url: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  senate_chair: InputMaybe<LegislatorFilterInput>;
  senate_members: InputMaybe<LegislatorFilterListInput>;
  senate_vice_chair: InputMaybe<LegislatorFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_districtArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  chamber: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lat: InputMaybe<FloatQueryOperatorInput>;
  lng: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  van_id: InputMaybe<StringQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  childMdx: InputMaybe<MdxFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  childrenMdx: InputMaybe<MdxFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_issueArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  bills: InputMaybe<BillFilterListInput>;
  bills_to_support_title: InputMaybe<StringQueryOperatorInput>;
  catchphrase: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  failures: InputMaybe<IssueTextBlockFilterListInput>;
  failures_block_title: InputMaybe<StringQueryOperatorInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  highlighted_bills: InputMaybe<BillFilterListInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  img: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  learn_more: InputMaybe<LinkWithImgFilterListInput>;
  logo: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  page_img: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  questions: InputMaybe<IssueTextBlockFilterListInput>;
  references: InputMaybe<IssueReferenceFilterListInput>;
  subtitle: InputMaybe<StringQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_legislatorArgs = {
  aom_id: InputMaybe<StringQueryOperatorInput>;
  chamber: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  committees: InputMaybe<LegislatorCommitteeFilterListInput>;
  cosponsored_bills: InputMaybe<BillFilterListInput>;
  district: InputMaybe<DistrictFilterInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  end_date: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  first_name: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  hometown: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  last_name: InputMaybe<StringQueryOperatorInput>;
  malegislature_url: InputMaybe<StringQueryOperatorInput>;
  ocd_id: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  party: InputMaybe<StringQueryOperatorInput>;
  phone: InputMaybe<StringQueryOperatorInput>;
  pledge: InputMaybe<BooleanQueryOperatorInput>;
  square_picture: InputMaybe<StringQueryOperatorInput>;
  start_date: InputMaybe<StringQueryOperatorInput>;
  supports_the_campaign: InputMaybe<BooleanQueryOperatorInput>;
  supports_the_campaign_committee_votes: InputMaybe<BooleanQueryOperatorInput>;
  supports_the_campaign_public_bills: InputMaybe<BooleanQueryOperatorInput>;
  supports_the_campaign_term_limits: InputMaybe<BooleanQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_newsArgs = {
  author: InputMaybe<StringQueryOperatorInput>;
  category: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  date: InputMaybe<StringQueryOperatorInput>;
  extract: InputMaybe<StringQueryOperatorInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_pageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  permalink: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_postArgs = {
  children: InputMaybe<NodeFilterListInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  redirect_from: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_teamMemberArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  fileName: InputMaybe<StringQueryOperatorInput>;
  hidden: InputMaybe<BooleanQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  photo: InputMaybe<StringQueryOperatorInput>;
};

type Script = {
  readonly call_request: Maybe<Scalars['String']>;
  readonly call_thanks: Maybe<Scalars['String']>;
  readonly email_request: Maybe<EmailScript>;
  readonly email_thanks: Maybe<EmailScript>;
  readonly tweet_after_request_call: Maybe<Scalars['String']>;
  readonly tweet_after_request_email: Maybe<Scalars['String']>;
  readonly tweet_after_thanks_call: Maybe<Scalars['String']>;
  readonly tweet_after_thanks_email: Maybe<Scalars['String']>;
  readonly tweet_request: Maybe<Scalars['String']>;
  readonly tweet_thanks: Maybe<Scalars['String']>;
};

type ScriptFieldSelector = {
  readonly call_request: InputMaybe<FieldSelectorEnum>;
  readonly call_thanks: InputMaybe<FieldSelectorEnum>;
  readonly email_request: InputMaybe<EmailScriptFieldSelector>;
  readonly email_thanks: InputMaybe<EmailScriptFieldSelector>;
  readonly tweet_after_request_call: InputMaybe<FieldSelectorEnum>;
  readonly tweet_after_request_email: InputMaybe<FieldSelectorEnum>;
  readonly tweet_after_thanks_call: InputMaybe<FieldSelectorEnum>;
  readonly tweet_after_thanks_email: InputMaybe<FieldSelectorEnum>;
  readonly tweet_request: InputMaybe<FieldSelectorEnum>;
  readonly tweet_thanks: InputMaybe<FieldSelectorEnum>;
};

type ScriptFilterInput = {
  readonly call_request: InputMaybe<StringQueryOperatorInput>;
  readonly call_thanks: InputMaybe<StringQueryOperatorInput>;
  readonly email_request: InputMaybe<EmailScriptFilterInput>;
  readonly email_thanks: InputMaybe<EmailScriptFilterInput>;
  readonly tweet_after_request_call: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_after_request_email: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_after_thanks_call: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_after_thanks_email: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_request: InputMaybe<StringQueryOperatorInput>;
  readonly tweet_thanks: InputMaybe<StringQueryOperatorInput>;
};

type ScriptSortInput = {
  readonly call_request: InputMaybe<SortOrderEnum>;
  readonly call_thanks: InputMaybe<SortOrderEnum>;
  readonly email_request: InputMaybe<EmailScriptSortInput>;
  readonly email_thanks: InputMaybe<EmailScriptSortInput>;
  readonly tweet_after_request_call: InputMaybe<SortOrderEnum>;
  readonly tweet_after_request_email: InputMaybe<SortOrderEnum>;
  readonly tweet_after_thanks_call: InputMaybe<SortOrderEnum>;
  readonly tweet_after_thanks_email: InputMaybe<SortOrderEnum>;
  readonly tweet_request: InputMaybe<SortOrderEnum>;
  readonly tweet_thanks: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TeamMember = Node & {
  readonly body: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly fileName: Scalars['String'];
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly photo: Maybe<Scalars['String']>;
};

type TeamMemberConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamMemberEdge>;
  readonly group: ReadonlyArray<TeamMemberGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamMember>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamMemberConnection_distinctArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberConnection_groupArgs = {
  field: TeamMemberFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamMemberConnection_maxArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberConnection_minArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberConnection_sumArgs = {
  field: TeamMemberFieldSelector;
};

type TeamMemberEdge = {
  readonly next: Maybe<TeamMember>;
  readonly node: TeamMember;
  readonly previous: Maybe<TeamMember>;
};

type TeamMemberFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly photo: InputMaybe<FieldSelectorEnum>;
};

type TeamMemberFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly photo: InputMaybe<StringQueryOperatorInput>;
};

type TeamMemberGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamMemberEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TeamMemberGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamMember>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamMemberGroupConnection_distinctArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberGroupConnection_groupArgs = {
  field: TeamMemberFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamMemberGroupConnection_maxArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberGroupConnection_minArgs = {
  field: TeamMemberFieldSelector;
};


type TeamMemberGroupConnection_sumArgs = {
  field: TeamMemberFieldSelector;
};

type TeamMemberSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly photo: InputMaybe<SortOrderEnum>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type allLegislatorQueryVariables = Exact<{ [key: string]: never; }>;


type allLegislatorQuery = { readonly allLegislator: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly href: string, readonly first_name: string, readonly last_name: string, readonly chamber: string, readonly party: string | null, readonly square_picture: string | null, readonly district: { readonly lat: number | null, readonly lng: number | null } | null }> } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };


}
